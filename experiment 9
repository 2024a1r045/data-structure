#include <stdio.h>
#include <stdlib.h>

// Define node
struct Node{
    int data;
    struct Node* next;
};

struct Node* head=NULL;
struct Node* createNode(int ele){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->next = NULL;
    return temp;
}
void insertNodeInBeg(int ele){
    struct Node* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
        head->next = head;
    } else {
        newNode->next = head;
        struct Node* temp = head;
        while(temp->next != head){
            temp = temp->next;
        }
        temp->next = newNode;
        head = newNode;
    } 
    printf("Node Inserted in beggining !!!!!\n");
}
void insertNodeAtEnd(int ele){
    struct Node* newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
        head->next = head;
    }else{struct Node* temp = head;
        while(temp->next != head){
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
    printf("Node Inserted at End!!!!\n");
}
void insertNodeAtAnyPos(int ele, int pos){
    if (head == NULL)
    printf("List is Empty !!!!\n");
else if (pos == 1)
    insertNodeInBeg(ele);
else {
    struct Node* temp = head;
    int i = 1;
    while (i != pos && temp->next != head) {
        temp = temp->next;
        i++;
    }
    if (temp->next != head && pos>0) {
        struct Node* newNode = createNode(ele);
        newNode->next = temp->next;
        temp->next = newNode;
        printf("Node Inserted !!!!!\n");
    } else
        printf("Invalid Position!!!\n");
  }
}
void deleteNodeFromBeg(){
    if(head == NULL)
    printf("list is Empty!!!!\n");
    else if(head->next == head){ //if list contains only single node
        struct Node *temp = head;
        head = NULL;
        free(temp);
    }
    else{//if list has more than 1 node
        struct Node *temp = head;
        while(temp->next = head){
            temp=temp->next;
        }
        struct Node* t = head;
        head = head->next;
        temp->next = head;
        free(t);
        printf("Node Deleted from beggining!!!!!\n");
    }     
}
void deleteNodeFromEnd(){
    if(head == NULL)
    printf("list is Empty!!!!\n");
  else if(head->next == head){ //if list contains only single node
    struct Node *temp = head;
    head = NULL;
    free(temp);
  }
 else{//if list has more than 1 node
     struct Node *temp = head;
     while(temp->next->next!= head){
        temp = temp->next;
     }
     struct Node *t = temp->next;
     temp->next = head;
     free(t);
     printf("Node Deleted from End!!!!\n");  
  }
}
void deleteNodeFromAnyPos(int pos){
    if (head == NULL)
    printf("List is Empty !!!!\n");
else if (pos == 1)
    deleteNodeFromBeg();
else {
    struct Node* temp = head;
    int i = 1;
    while (i<pos-1 && temp->next != head) {
       i++;
       temp = temp->next;
    }
    if (temp->next != head && pos>0) {
        struct Node *t = temp->next;
        temp->next = temp->next->next;
        free(t);
        printf("Node Deleted !!!!!\n");
    } else
        printf("Invalid Position!!!\n");
  }
}
void search(int target){
    if(head == NULL)
    printf("List is Empty!!!!\n");
    else{
     struct Node *temp = head;
     do{
        if(target == temp->data){
         printf("Found!!!!\n");
        return;
        }
        temp = temp->next;
    }while(temp!=head);
    printf("Not Found!!!!\n");
  }
}
void display(){
   if(head == NULL)
   printf("List is Empty!!!!\n");
   else{
    struct Node *temp = head;
    do{
        printf("%d ",temp->data);
        temp = temp->next;
    }while(temp!=head);
   }
}
int main() {
    int choice, value, pos;
    while (1) {
        printf("\n<----- Circular Singley Linked List ----->\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at any position\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete from end\n");
        printf("6. Delete from any position\n");
        printf("7. Search an element\n");
        printf("8. Display list\n");
        printf("9. Exit\n\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeInBeg(value);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &value);
                insertNodeAtEnd(value);
                break;
            case 3:
                printf("Enter value and position: ");
                scanf("%d %d", &value, &pos);
                insertNodeAtAnyPos(value, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &pos);
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter value to search: ");
                scanf("%d", &value);
                search(value);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
